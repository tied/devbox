#!/usr/bin/env bash
#
# @LICENSE  Apache-2.0
# @AUTHOR   Hasnae R.
# @VERSION  1.0.0
#

source selfedit.sh

##############
# HOUSEKEEPING
##############

# @COMMAND addkey                           adds ssh key
addkey() {
    ssh-add -K ~/.ssh/id_rsa
}

# @COMMAND audit [size?]                    checks for folders larger than 500MB in the current directory
audit() {
    max=$(_default '500000')
    sudo du -k * | awk "\$1 > $max" | sort -nr
}

# @COMMAND portid [port]                    displays process listening on target port
portid() {
    lsof -i :$1
}

# @COMMAND src                              changes directory to viqueen sources dir
src() {
  cd ${VIQUEEN_DEVBOX_HOME}/..
}

# @COMMAND vimr                             vim refresh
vimr () {
  vim +PluginInstall +qall
}

# @COMMAND vimrc                            vim config
vimrc() {
  vim ${VIQUEEN_DEVBOX_HOME}/.vimrc
}

#####
# GIT
#####

# @COMMAND gl                               pretty git log
gl() {
    git log \
        --graph \
        --full-history \
        --color \
        --date=iso \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%x1b[35m%ad %x1b[0m%s %x1b[35m(%aE)""]]]]]]"
}

# @COMMAND master [count?]                  top commiters to the repo
masters() {
    count=$(_default $1 40)
    git log --format=format:%an | sort | uniq -c | sort -r | head -n +${count}
}

# @COMMAND users [count?]                   displays authors of recent commits
users() {
  count=$(_default $1 20)
  git log -${count} --pretty="%ae" | sort | uniq
}

# @COMMAND commit                           triggers a commit with jira issue prefix extracted from branch name
commit() {
  message=${@}
  branch_name=$(git rev-parse --abbrev-ref HEAD)
  prefix="noissue"
  if [[ ${branch_name} =~ ^(.*)/([A-Z]+-[0-9]+)-(.*)$ ]]; then
    prefix=${BASH_REMATCH[2]}
  fi
  git commit -m "[${prefix}] - ${message}"
}

# @COMMAND pull                             git pull from upstream
pull() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git pull origin ${upstream}
}

# @COMMAND push                             git push to upstream
push() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git push origin ${upstream}
}

# @COMMAND fetch                            git fetch and git pull from origin
fetch() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git fetch && git pull origin ${upstream}
}

# @COMMAND recent                           recent git branches
recent() {
    git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'
}

# @COMMAND merged                           list merged branches
merged() {
  git branch --merged | egrep -v "(^\*|master|release)"
}

# @COMMAND branch                           displays current branch name
branch() {
  git rev-parse --abbrev-ref HEAD
}

# @COMMAND contains                         check remote release branches for commit
contains() {
  _with_arguments 1 $@
  hash=${1}; shift
  git branch -r --contains ${hash} --list 'origin/release/*'
}

# @COMMAND show [prop] [version]            greps maven property for given version
show() {
  _with_arguments 1 $@
  property=${1}
  if [[ -z ${2} ]]; then
    tag=HEAD
  else
    version=$(_replace ${2} "." "\.")
    tag=$(git tag | grep "${version}$")
  fi
  git grep "${property}" ${tag} pom.xml
}

#######
# MAVEN
#######

# @COMMAND build                            runs threaded maven build with skipping tests
build() {
    mvn -e -T 0.75C clean install -DskipTests=true -DskipITs=true $@
}

# @COMMAND compile                          runs threaded maven compile
compile() {
  mvn -e -T 0.75C compile $@
}

# @COMMAND setver                           interactively updates the maven version of a project
setver() {
    mvn release:update-versions -DautoVersionSubmodules=true -DgenerateBackupPoms=false $@
}

# @COMMAND upver                            updates parent pom version to more recent value
upver() {
  mvn versions:update-parent -DgenerateBackupPoms=false $@
}

# @COMMAND ver                              display maven project version
ver() {
  getprop 'project.version'
}

# @COMMAND release                          runs a maven release
release() {
    mvn -B -DskipTests -Darguments=-DskipTests release:clean release:prepare release:perform $@
}

# @COMMAND updeps                           display dependency updates
updeps() {
    mvn versions:display-dependency-updates
}

# @COMMAND setprop                          sets a maven property value
setprop() {
  _with_arguments 2 $@
  property_name=${1}
  shift
  property_value=${1}
  shift
  mvn versions:set-property -Dproperty=${property_name} -DnewVersion=${property_value} -DgenerateBackupPoms=false $@
}

# @COMMAND getprop                          gets a maven property value
getprop() {
  _with_arguments 1 $@
  property_name=${1}
  shift
  execArgs=$(printf '${%s}' ${property_name})
  mvn -q -Dexec.executable=echo -Dexec.args="'${execArgs}'" --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec $@
}

###############
# NODE / NPM
##############

# @COMMAND npmg                             list global npm packages
npmg() {
  npm list -g --depth 0
}

eval $@

if [[ -z $1 ]];
then
    cd ${VIQUEEN_DEVBOX_HOME}
fi
