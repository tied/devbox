#! /usr/bin/env bash
#
# @LICENSE  Apache-2.0
# @AUTHOR Hasnae R.
# @VERSION 1.0.0
#

source selfedit.sh

_pick_author() {
    while read data
    do
        filename=${data}
        annotation=$(git annotate -e ${filename} HEAD)
        if [[ ${annotation} =~ ^(.*)(<${pick_author}>)(.*)$ ]]; then
            echo ${pick_author} : ${filename}
        fi
    done
}

# @COMMAND pick [author]                  picks out files with changes from author
function pick() {
    _with_arguments 1 $@
    pick_author=${1}; shift

    git ls-tree --name-only -r HEAD \
        | _pick_author
}

_tune_author() {
    while read data
    do
        if [[ ${data} =~ ^HEAD:(.*):(.*):$ ]]; then
            filename=${BASH_REMATCH[1]}
            linenumber=${BASH_REMATCH[2]}
            all_the_blames=$(git annotate -e -L ${linenumber},${linenumber} ${filename})
            if [[ "${all_the_blames}" =~ ^(.*)(<${tune_author}>)(.*)$ ]]; then
                echo "***"
                echo "${filename}"
                echo "${all_the_blames}"
            fi
        fi
    done
}

# @COMMAND tune [pattern]                 finds out files with the pattern from author
function tune() {
    _with_arguments 1 $@
    pattern="${1}"
    tune_author=$(_default $2 $(git config user.email))

    git grep --line-number "${pattern}" HEAD \
        | awk '{print $1}' \
        | _tune_author
}

_filter_branches() {
    while read data
    do
      if [[ ${data} =~ ^(.*)(origin/(confluence_|confluence-project-|release/(.*)).*)$ ]]; then
        date_and_author=${BASH_REMATCH[1]}
        branch=${BASH_REMATCH[2]}
        echo -e "${date_and_author} \033[32m${branch}\033[0m"
      fi
    done
}

# @COMMAND scale                          shows all the release/rogue/candidate branches
function scale() {
  git branch -va --sort=-committerdate --format='%(committerdate:short) %(authorname) %(refname:short)' \
    | _filter_branches
}

# @COMMAND chord <?count>                 shows most recent tags
function chord() {
  count=${1:-10}
  git tag --sort=-creatordate | head -n ${count}
}

eval $@

if [[ -z $1 ]]; then
    $0 -h
fi
